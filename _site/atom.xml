<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stephendnicholas.com</title>
  <id>https://stephendnicholas.com</id>
  <link href="https://stephendnicholas.com" />
  <link href="https://stephendnicholas.com/atom.xml" rel="self" />
  <updated>2016-01-27T20:48:46-07:00</updated>
  <rights>Copyright 2014, Stephen Nicholas</rights>
  <author>
    <name>Stephen Nicholas</name>
  </author>
  
    <entry>
      <title>LinkedIn-dentation &amp;#038; Formatting</title>
      <link href="https://stephendnicholas.com/linked-in-formatting" />
      <summary type="html">&lt;p&gt;Last week I decided to update my &lt;a href=&quot;http://uk.linkedin.com/in/stephendnicholas/&quot; target=&quot;_blank&quot;&gt;LinkedIn profile&lt;/a&gt; and I was surprised by the lack of &lt;a href=&quot;http://help.linkedin.com/app/answers/detail/a_id/1237/~/formatting-text-or-adding-links&quot; target=&quot;_blank&quot;&gt;formatting options&lt;/a&gt;. In fact ‘surprised’ is a severe understatement. It seems crazy to me that on the world’s foremost business social networking site, I get no more formatting options than I do in notepad! Less in fact, as you can’t even use white space or indentation to lay things out nicely (You can type it in, but LinkedIn actively removes it). God knows why. Perhaps it’s a case of school uniform thinking, to try and maintain a single ‘professional’ look. But it’s not good enough for me.&lt;/p&gt;

&lt;p&gt;A quick search didn’t turn up much, except for a lot of people complaining about the same problem, but I did find out you can include certain characters in your profile text. Including:&lt;/p&gt;

&lt;p&gt;★ ♦ ✔ ■ ● ✉ ✆ •&lt;/p&gt;

&lt;p&gt;This jazzes things up a bit, but what I really wanted was controllable whitespace. In my opinion there’s nothing better to make a document more readable and consumable. Buoyed on by being able to insert some symbols, I went on journey of trial and error through the unicode character set. &lt;/p&gt;

&lt;p&gt;Eventually I found one that worked, the humble ‘&lt;a href=&quot;http://www.fileformat.info/info/unicode/char/2000/index.htm&quot; target=&quot;_blank&quot;&gt;en quad&lt;/a&gt;‘. Simply copy and paste (from your system Character Map) repeated instances of this into your profile and you can eventually get something a lot nicer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/linkedingoodformat.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not ideal I’ll admit, but definitely better than this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/linkedinbadformat.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And until LinkedIn eventually catch up to the needs of their users, it will have to do.&lt;/p&gt;
</summary>
      <id>https://stephendnicholas.com/linked-in-formatting</id>
      <updated>2014-08-30T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Styling guide for Hikari: best practices</title>
      <link href="https://stephendnicholas.com/2014/01/27/hikari-styling-guide/" />
      <summary type="html">&lt;p&gt;But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Good design is as little design as possible, said Dieter. Use quotations very carefully; especially if you don’t understand them. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bullet points are so fancy&lt;/li&gt;
  &lt;li&gt;Easy to read, they make you look like a pro&lt;/li&gt;
  &lt;li&gt;Even when completely random &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ooh, and with numbers, it’s even fancier&lt;/li&gt;
  &lt;li&gt;It’s like 1, 2, 3, did you see?&lt;/li&gt;
  &lt;li&gt;Crazy stuff all around us; scary&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There’s nothing like a good block of code! Especially when picked randomly out of Github (&lt;a href=&quot;https://github.com/jacobrask/styledocco/blob/master/styledocco.js&quot;&gt;styledocco.js&lt;/a&gt;).  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;separate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;docs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;single&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;docs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formatDocs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;multistart&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;docs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formatDocs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;multiend&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;code&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;multiend&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formatCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img2.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;Heading 1&lt;/h1&gt;
&lt;p&gt;Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure.&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?&lt;/p&gt;

&lt;h3 id=&quot;heading-3&quot;&gt;Heading 3&lt;/h3&gt;
&lt;p&gt;In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided.&lt;/p&gt;

&lt;h4 id=&quot;heading-4&quot;&gt;Heading 4&lt;/h4&gt;
&lt;p&gt;But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted.&lt;/p&gt;
</summary>
      <id>https://stephendnicholas.com/2014/01/27/hikari-styling-guide/</id>
      <updated>2014-01-27T09:57:51-07:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Power Profiling: HTTPS Long Polling vs. MQTT with SSL, on Android</title>
      <link href="https://stephendnicholas.com/archives/1217" />
      <summary type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;p&gt;A little while ago I performed some &lt;a href=&quot;http://stephendnicholas.com/archives/219&quot; target=&quot;_blank&quot;&gt;power profiling of MQTT on Android&lt;/a&gt; to try and put a figure on just how efficient this technology is on mobile devices. I think I got some pretty good results (enough to give an idea anyway), but the next question people always ask is: ‘So how does that compare to the alternatives?’.&lt;br /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/21883298@N08/6843978633/&quot; title=&quot;Apples Vs Oranges by Craig in TO, on Flickr&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7208/6843978633_4c33e7ba6f_m.jpg&quot; width=&quot;240&quot; height=&quot;174&quot; alt=&quot;Apples Vs Oranges&quot; class=&quot;alignright&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Well, first of all, it is really Apples vs. Oranges :D&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;applesvsoranges&quot;&gt;&lt;/a&gt;&lt;a name=&quot;whymqtt&quot;&gt;&lt;/a&gt;Of my three main choices for Android mobile push notifications: MQTT, HTTP or C2DM, each is designed for a different purpose; with different features, bad points and good points. I’m not going to do a full comparison here, but to summarise:&lt;/p&gt;

&lt;ul style=&quot;padding-bottom:0em&quot;&gt;
  &lt;li style=&quot;margin-bottom:1em&quot;&gt;
    &lt;b&gt;MQTT&lt;/b&gt; &amp;#8211; designed to provide low latency, assured messaging over fragile networks and efficient distribution to one or many receivers. Protocol focuses on minimising the amount of bytes flowing over the wire and low power usage. Maximum message size of 256MB, but not really designed for sending large amounts of data; better at a high volume of low size messages. Provides a two-way communication channel.
  &lt;/li&gt;
  &lt;li style=&quot;margin-bottom:1em&quot;&gt;
    &lt;b&gt;HTTP&lt;/b&gt; &amp;#8211; designed as a request-response protocol for client-server computing. Best known as the foundation of data communication for the World Wide Web (well, duh). It can be &amp;#8216;abused&amp;#8217; to provide push like capabilities, for example by using Comet style approaches, but it really isn&amp;#8217;t designed with this in mind. Provides two-way communication capabilities.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;b&gt;C2DM&lt;/b&gt; &amp;#8211; designed as a one-way &amp;#8216;shoulder-tap&amp;#8217; notification system. On the plus side, Google takes care of getting the messages to the device and to your application; waking it if necessary. However there are a number of restrictions. The main one is, as the &lt;a href=&quot;https://developers.google.com/android/c2dm/&quot; target=&quot;_blank&quot;&gt;Google Docs&lt;/a&gt; themselves say, that &lt;i&gt;&amp;#8216;C2DM makes no guarantees about delivery or the order of messages&amp;#8217;&lt;/i&gt;. Therefore, the recommendation is that a C2DM message should never contain the data itself but, rather, be used to provide a notification that there is data available; and applications should then contact their own server to get the data. Other restrictions include: &lt;ul style=&quot;margin-top:1em;&quot;&gt;
      &lt;li&gt;
        Only available on devices running &amp;gt; Android 2.2.
      &lt;/li&gt;
      &lt;li&gt;
        Requires a registered Google account on the device.
      &lt;/li&gt;
      &lt;li&gt;
        Message size is limited to 1024 bytes.
      &lt;/li&gt;
      &lt;li&gt;
        Google limits the number of messages a sender sends in aggregate.
      &lt;/li&gt;
      &lt;li&gt;
        And the number of messages a sender sends to a specific device.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, fruit rivalry aside, it’s still an interesting question and my points above don’t tend to stop people asking, so I thought I’d try a comparison against the most equivalent &amp;amp; open approach, in my opinion, (and also the easiest one for me to test): HTTP. Also, what with security on mobile being such a big issue, I decided I’d test the secure versions: HTTPS and SSL enabled MQTT.&lt;/p&gt;

&lt;h3 id=&quot;what-was-i-testing&quot;&gt;What was I testing?&lt;/h3&gt;

&lt;p&gt;On the MQTT side, it was very similar to what I tested &lt;a href=&quot;http://stephendnicholas.com/archives/219&quot; target=&quot;_blank&quot;&gt;previously&lt;/a&gt;: a simple application using a custom wrapper around the standard Java MQTT client offered by IBM; but this time using an SSL connection against a SSL enabled instance of &lt;a href=&quot;http://www-10.lotus.com/ldd/lewiki.nsf/dx/12022008074527PMBJA2VV.htm&quot; target=&quot;_blank&quot;&gt;Micro Broker&lt;/a&gt; and performing mutual certificate based authentication between the client and server.&lt;/p&gt;

&lt;p&gt;For the HTTPS side, I decided to use Comet style long polling. If you’re not familiar with this, the client-server interaction looks something like this:&lt;/p&gt;

&lt;p&gt;[&lt;img src=&quot;http://stephendnicholas.com/wp-content/uploads/2012/05/longpolling.png&quot; alt=&quot;&quot; title=&quot;longpolling&quot; width=&quot;600&quot; height=&quot;284&quot; class=&quot;aligncenter size-full wp-image-1218&quot; srcset=&quot;http://stephendnicholas.com/wp-content/uploads/2012/05/longpolling-300x142.png 300w, http://stephendnicholas.com/wp-content/uploads/2012/05/longpolling.png 600w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot; /&gt;][1]&lt;/p&gt;

&lt;p&gt;Basically, the client makes a HTTPS request to the server, which is kept open until the server has new data to send to the client. When this data arrives, the server sends it to the client and closes the request. The client then initiates a new long polling request in order to obtain subsequent events.&lt;/p&gt;

&lt;p&gt;On the server side, I used [a simple SSL enabled Comet style Pub/Sub server][2] I wrote recently in Node.js. And for the client side, I wrote a simple Android app that connects to this as needed using a standard &lt;a href=&quot;http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html&quot; target=&quot;_blank&quot;&gt;HttpsURLConnection&lt;/a&gt;. Again performing mutual certificate based authentication between the two.&lt;/p&gt;

&lt;h3 id=&quot;how-did-i-test-them&quot;&gt;How did I test them?&lt;/h3&gt;

&lt;p&gt;Again, it was very similar to what I did &lt;a href=&quot;http://stephendnicholas.com/archives/219&quot; target=&quot;_blank&quot;&gt;previously&lt;/a&gt;; using the Android applications mentioned above, along with simple desktop apps to drive them where required. The tests were kicked off manually, however I’ve improved the overall automation of them. The results from here should be reliably comparable with the previous ones.&lt;/p&gt;

&lt;h3 id=&quot;caveats--specifics&quot;&gt;Caveats / Specifics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The power profiling was performed on my HTC Desire, now running Android 2.2.2 – Build 2.33.161.6 CL345089.&lt;/li&gt;
  &lt;li&gt;‘% Battery / Hour’ refers to the % of the fully charged capacity of my phone’s battery that is used per hour. My phone has a standard Li-Ion battery that is rated at: 1400mAh &amp;amp; 3.7V.&lt;/li&gt;
  &lt;li&gt;The tool I used to capture the power usage data ([PowerTutor][3]) uses real data, combined with a power usage model for some aspects. This model has been tailored against the type of device I used for this testing and is reported to be accurate to within 0.8% on average, with a 2.5% margin of error. If you’re interested, you can find out more [here][4].&lt;/li&gt;
  &lt;li&gt;I’ve made a number of decisions on my implementation of the two approaches. I’ve done this to try and make MQTT and HTTPS more equal and make things fairer; not to bias things one way or the other. I’ve tried to do this sensibly and I’ll explain myself as I go along; however some people may have decided to do things slightly differently.&lt;/li&gt;
  &lt;li&gt;I’ve tried my best to produce correct, consistent and usable results; however I am human and so there’s a chance I have made mistakes. As such, these figures shouldn’t be treated as gospel, but I would expect them to be representative of what you could expect to see and they should provide an accurate comparison between the two approaches.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;a-nameconnectingaestablishing--maintaining-a-connection&quot;&gt;&lt;a name=&quot;connecting&quot;&gt;&lt;/a&gt;Establishing &amp;amp; Maintaining a Connection&lt;/h2&gt;

&lt;p&gt;I decided to start out by looking at the cost of establishing and then maintaining an open connection for each approach. And I pretty much ran straight into one of the main challenges of this testing: how to make it a fair fight? How do I structure things so I’m not being un-necessarily biased to one technology or the other?&lt;/p&gt;

&lt;p&gt;Straight out of the box, MQTT is much more feature rich than HTTPS and the main feature involved here is the Keep Alive. Basically this is a way for the client to detect in a timely manner when the server connection has been lost (and vice-versa) without having to wait for the often long TCP/IP timeout. To do this, the MQTT client and server exchange keep-alive messages every so often. This also serves to maintain the raw TCP/IP connection; as in some circumstances (e.g. on some 3G networks) long-running connections that have no data flowing my be purged.&lt;/p&gt;

&lt;p&gt;HTTPS doesn’t have this built in, but it seems like useful functionality for an application to have and so I decided to add this into my HTTPS client by using a &lt;a href=&quot;http://developer.android.com/reference/java/net/URLConnection.html#setReadTimeout(int)&quot; target=&quot;_blank&quot;&gt;read timeout&lt;/a&gt; of the same duration as the MQTT keep alive interval. This means that if the server doesn’t respond with any data within &lt;em&gt;x&lt;/em&gt; seconds then an Exception is thrown and the connection torn down. The client will then establish a new one. If it can’t, then the client knows the server is unreachable.&lt;/p&gt;

&lt;p&gt;Hopefully that sounds like a fair thing to do, but don’t worry, it also flows the other way. As, in my implementation, the HTTPS client also ‘subscribes’ as part of it’s connection (the topic of interest being part of the URL), I decided to consider the act of MQTT connecting to include both the connection and a subscription step.&lt;/p&gt;

&lt;p&gt;Anyway, enough waffling, onto the results. First of all, the amount of power taken to establish the initial connection to the server:&lt;/p&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;margin-bottom:1.5em;&quot;&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;4&quot; style=&quot;background-color:#E6E6FA;&quot;&gt;
      % Battery Used
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
      3G
    &lt;/th&gt;
    
    &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
      Wifi
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      HTTPS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      MQTT
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      HTTPS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      MQTT
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;b&gt;0.02972&lt;/b&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      0.04563
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.00228&lt;/b&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      0.00276
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, HTTPS wins this one hands down; and by quite a significant amount (~30% for 3G). However this isn’t really that much of a surprise:&lt;/p&gt;

&lt;p&gt;With the HTTPS approach, all we’re doing is opening a connection to the appropriate URL and exchanging certificates. Whereas, for MQTT, we establish the raw connection, perform the certificate exchange and then flow additional information; including the unique Client Id. We then wait to receive a confirmation from the server and then subsequently send additional messages to subscribe to the test topic (which shouldn’t be required for subsequent reconnections; as the server can remember our subscriptions for us).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: just to emphasise, this is an artificial limitation that I’ve placed on MQTT. If you don’t need the subscribe step, then the actual cost of connection is very comparable. However, this is something that I &lt;u&gt;decided&lt;/u&gt; to do to make the comparison more fair.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;openconnection&quot;&gt;&lt;/a&gt;&lt;a name=&quot;keepalive&quot;&gt;&lt;/a&gt;Now onto the cost of ‘maintaining’ that connection (in % Battery &lt;strong&gt;/ Hour&lt;/strong&gt;):&lt;/p&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;margin-bottom:1.5em;&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;border:0;&quot;&gt;
    &lt;/th&gt;
    
    &lt;th colspan=&quot;4&quot; style=&quot;background-color:#E6E6FA;&quot;&gt;
      % Battery / Hour
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th style=&quot;border:0;&quot;&gt;
    &lt;/th&gt;
    
    &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
      3G
    &lt;/th&gt;
    
    &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
      Wifi
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th style=&quot;width:7em;background-color:#E6E6FA;&quot;&gt;
      Keep Alive&lt;br /&gt;(Seconds)
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      HTTPS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      MQTT
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      HTTPS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      MQTT
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      60
    &lt;/td&gt;
    
    &lt;td&gt;
      1.11553
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.72465&lt;/b&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      0.15839
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.01055&lt;/b&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      120
    &lt;/td&gt;
    
    &lt;td&gt;
      0.48697
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.32041&lt;/b&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      0.08774
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.00478&lt;/b&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      240
    &lt;/td&gt;
    
    &lt;td&gt;
      0.33277
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.16027&lt;/b&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      0.02897
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.00230&lt;/b&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      480
    &lt;/td&gt;
    
    &lt;td&gt;
      0.08263
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.07991&lt;/b&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      0.00824
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.00112&lt;/b&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, this is where MQTT gains back ground. In all cases it uses less power and in most a fair bit less. So the longer the connection is established, the ‘cheaper’ MQTT is to use.&lt;/p&gt;

&lt;p&gt;If we consider the 3G case (the most relevant to the mobile story) and a keep alive / read timeout interval of 240 seconds (my personal favourite) then by my calculations we make up for the difference in the cost of connecting after ~5 ½ minutes of being connected:&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;
  &lt;i&gt;Note: You can click &amp;amp; drag on an area of the graph to zoom to it.&lt;br /&gt;Single click anywhere to zoom back out.&lt;/i&gt;
&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; 240s Keep Alive &amp;#8211; % Battery Used Creating and Maintaining a Connection&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_C_240&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;After that, everything else is gravy, and based on this I reckon you’d save ~4.1% battery per day just by using MQTT over HTTPS to maintain an open stable connection.&lt;/p&gt;

&lt;p&gt;The reason for this is simple. While it costs MQTT more to create the initial connection, this is essentially a one off and the cost of the following keep alives is comparatively small. Whereas for HTTPS it needs to perform the ‘expensive’ connection stage every time it has to reconnect (up to once each keep alive interval, in my implementation).&lt;/p&gt;

&lt;p&gt;Interestingly, this does seem to suggest that if the phone is constantly cycling / dropping connections &lt;strong&gt;and&lt;/strong&gt; you’ve decided not to let the server remember your connections (so that MQTT has to perform the additional subscribe step on every reconnect – cleanstart=true for those in the know) then HTTPS may be a better choice for that particular scenario; and in that case MQTT would be better in slightly more stable situations. The obvious question then is: how often is the connection likely to drop in typical mobile usage?&lt;/p&gt;

&lt;p&gt;I’ve tried searching, but not really found any sensible statistics so far. The mobile network should handle routing TCP/IP connections from tower to tower, so that &lt;em&gt;shouldn’t&lt;/em&gt; be an issue; however you might go out of range or hit a tower with no spare capacity. Although I guess that’s not likely to happen very often (?). It’s something that I’d be interested in finding out, but it sounds like it would need a large field trial and that’s a little outside the scope of this blog post :)&lt;/p&gt;

&lt;h2 id=&quot;a-namereceivingareceiving&quot;&gt;&lt;a name=&quot;receiving&quot;&gt;&lt;/a&gt;Receiving&lt;/h2&gt;

&lt;p&gt;The next thing I looked at was receiving messages on the phone. To do this, I sent messages to the phone in two different ways:&lt;/p&gt;

&lt;h3 id=&quot;sporadically&quot;&gt;1. Sporadically&lt;/h3&gt;

&lt;p&gt;To try and emulate a more realistic style of notification sending, I decided to send 6 messages to the phone, with an average of 1 message per 10 minute interval, but with the message being sent ‘randomly’ during that time. This would enable me to test the long-term performance of each approach, but also to add in some unpredictability. For MQTT, the messages were delivered at QoS 1. The results are shown below:&lt;/p&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;margin-bottom:1.5em;&quot;&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;4&quot; style=&quot;background-color:#E6E6FA;&quot;&gt;
      % Battery Used
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
      3G
    &lt;/th&gt;
    
    &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
      Wifi
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      HTTPS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      MQTT
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      HTTPS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
      MQTT
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      0.34645
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.27239&lt;/b&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      0.04817
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;b&gt;0.00411&lt;/b&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;
  &lt;i&gt;Note: the timing of the messages was calculated beforehand, so both MQTT and HTTPS experienced exactly the same delays, etc.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;And here’s some graphs:&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; Receive 6 x 1 byte messages over 60 minutes – Total mW&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_Sporadic&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; Receive 6 x 1 byte messages over 60 minutes – Total mW&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_Sporadic&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, in both cases MQTT wins; by ~30% for the 3G case and an order of magnitude for Wifi.&lt;/p&gt;

&lt;p&gt;Also, I actually could’ve made the MQTT implementation more efficient: Currently I blindly send the keep alive message every &lt;em&gt;x&lt;/em&gt; seconds, regardless of when the last message was exchanged between client and server. Whereas I’d actually only need to send the keep alive message &lt;em&gt;x&lt;/em&gt; seconds after any message was last sent / received. Interestingly, the HTTPS implementation already exhibits this behaviour and so has a slight advantage.&lt;/p&gt;

&lt;p&gt;One final thing of note is that the Wifi graph above nicely shows the difference in the keep alive cost between the two approaches. This is not as obvious in the 3G graph, as the CPU &amp;amp; data transmission costs are overwhelmed by the cost of having the 3G active.&lt;/p&gt;

&lt;h3 id=&quot;a-namehighvolumea2-as-fast-as-possible&quot;&gt;&lt;a name=&quot;highvolume&quot;&gt;&lt;/a&gt;2. As Fast As Possible&lt;/h3&gt;

&lt;p&gt;To be consistent with the results I produced previously, I also decided to test sending 1024 messages, of 1 byte a piece, to the phone, as quickly as possible. The results are shown below:&lt;/p&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;border:0;&quot;&gt;
      &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
        3G
      &lt;/th&gt;
      
      &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
        Wifi
      &lt;/th&gt; 
      
      &lt;tr&gt;
        &lt;th style=&quot;border:0;&quot;&gt;
        &lt;/th&gt;
        
        &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
          HTTPS
        &lt;/th&gt;
        
        &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
          MQTT
        &lt;/th&gt;
        
        &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
          HTTPS
        &lt;/th&gt;
        
        &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
          MQTT
        &lt;/th&gt;
      &lt;/tr&gt;
      
      &lt;tr&gt;
        &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
          % Battery / Hour
        &lt;/th&gt;
        
        &lt;td&gt;
          18.43%
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;16.13%&lt;/b&gt;
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;3.45%&lt;/b&gt;
        &lt;/td&gt;
        
        &lt;td&gt;
          4.23%
        &lt;/td&gt;
      &lt;/tr&gt;
      
      &lt;tr&gt;
        &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
          Messages / Hour
        &lt;/th&gt; 
        
        &lt;td&gt;
          1708
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;160278&lt;/b&gt;
        &lt;/td&gt;
        
        &lt;td&gt;
          3628
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;263314&lt;/b&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      
      &lt;tr&gt;
        &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
          % Battery / Message &lt;a href=&quot;#BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;*&lt;/a&gt;
        &lt;/th&gt;
        
        &lt;td&gt;
          0.01709
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;0.00010&lt;/b&gt;
        &lt;/td&gt;
        
        &lt;td&gt;
          0.00095
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;0.00002&lt;/b&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      
      &lt;tr&gt;
        &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
          Messages Received
        &lt;/th&gt;
        
        &lt;td&gt;
          240 / 1024
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;1024 / 1024&lt;/b&gt;
        &lt;/td&gt;
        
        &lt;td&gt;
          524 / 1024
        &lt;/td&gt;
        
        &lt;td&gt;
          &lt;b&gt;1024 / 1024&lt;/b&gt;
        &lt;/td&gt;
      &lt;/tr&gt; 
      
      &lt;p&gt;
        &lt;a name=&quot;BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;&amp;nbsp;&lt;/a&gt;&lt;br /&gt; * &amp;#8211; % Battery / Message is a bit of a silly metric. There is a fixed cost in having the Wifi or 3G active and so the actual cost of just sending / receiving a single message would be higher. However these figures do serve to indicate the difference between the two approaches and hopefully give you an indication of the battery usage involved.
      &lt;/p&gt;
      
      &lt;p&gt;
        And here&amp;#8217;s some more graphs:
      &lt;/p&gt;
      
      &lt;h4 style=&quot;text-align: center;&quot;&gt;
        &lt;b&gt;3G &amp;#8211; Receive 1024 x 1 byte messages – Total mW&lt;/b&gt;
      &lt;/h4&gt;
      
      &lt;div id=&quot;noCellBorder&quot;&gt;
        &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
          &lt;tr&gt;
            &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
              mW
            &lt;/td&gt;
            
            &lt;td&gt;
              &lt;div id=&quot;_3G_R&quot; style=&quot;width:550px;height:300px;&quot;&gt;
              &lt;/div&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          
          &lt;tr&gt;
            &lt;td&gt;
            &lt;/td&gt;
            
            &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
              1 second period
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/div&gt;
      
      &lt;h4 style=&quot;text-align: center;&quot;&gt;
        &lt;b&gt;Wifi &amp;#8211; Receive 1024 x 1 byte messages – Total mW&lt;/b&gt;
      &lt;/h4&gt;
      
      &lt;div id=&quot;noCellBorder&quot;&gt;
        &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
          &lt;tr&gt;
            &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
              mW
            &lt;/td&gt;
            
            &lt;td&gt;
              &lt;div id=&quot;_W_R&quot; style=&quot;width:550px;height:300px;&quot;&gt;
              &lt;/div&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          
          &lt;tr&gt;
            &lt;td&gt;
            &lt;/td&gt;
            
            &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
              1 second period
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/div&gt;
      
      &lt;p style=&quot;text-align:center;&quot;&gt;
        &lt;i&gt;Note: the data in the graphs for each approach stops 5 seconds after all messages have been received.&lt;/i&gt;
      &lt;/p&gt;
      
      &lt;p&gt;
        Again, MQTT wins this one. Despite it being a bit of a silly metric, the % Battery / Message really is the interesting one to look at, and in the 3G case MQTT is over two orders of magnitude better than HTTPS. This highlights both the low power usage of MQTT and also the speed with which the messages were received (averaging 160278 messages per hour for MQTT versus only 1708 for HTTPS).
      &lt;/p&gt;
      
      &lt;p&gt;
        &lt;a name=&quot;reliable&quot;&gt;&lt;/a&gt;Another important thing to highlight is the reliability (or perhaps, more accurately, success rate) of delivery. For 3G, every MQTT message got through, whereas HTTPS only managed 240 of the 1024, ~24%. This is because a lot of messages were missed in the interval between when the connection closed with the previous message and was subsequently re-established to receive the next. This is somewhat mitigated on Wifi, as the connection can be re-established more quickly. I could&amp;#8217;ve decided to implement a queueing mechanism on the server to help with this, but as MQTT didn&amp;#8217;t need it, I thought it was fair not to.
      &lt;/p&gt;
      
      &lt;h2&gt;
        &lt;a name=&quot;sending&quot;&gt;&lt;/a&gt;&lt;a name=&quot;twoway&quot;&gt;&lt;/a&gt;Sending
      &lt;/h2&gt;
      
      &lt;p&gt;
        Finally, I looked at sending messages from the phone. I found it somewhat difficult to get sensible &amp;amp; consistent figures for sending a single message and so I decided to scale up to sending 1024 messages, of 1 byte a piece, as quickly as possible. The results are shown below:
      &lt;/p&gt;
      
      &lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;&quot;&gt;
        &lt;tr&gt;
          &lt;th style=&quot;border:0;&quot;&gt;
            &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
              3G
            &lt;/th&gt;
            
            &lt;th colspan=&quot;2&quot; style=&quot;background-color:#F8E7B2;&quot;&gt;
              Wifi
            &lt;/th&gt; 
            
            &lt;tr&gt;
              &lt;th style=&quot;border:0;&quot;&gt;
              &lt;/th&gt;
              
              &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
                HTTPS
              &lt;/th&gt;
              
              &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
                MQTT
              &lt;/th&gt;
              
              &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
                HTTPS
              &lt;/th&gt;
              
              &lt;th style=&quot;width:6em;background-color:#f0fae6;&quot;&gt;
                MQTT
              &lt;/th&gt;
            &lt;/tr&gt;
            
            &lt;tr&gt;
              &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
                % Battery / Hour
              &lt;/th&gt;
              
              &lt;td&gt;
                18.79%
              &lt;/td&gt;
              
              &lt;td&gt;
                &lt;b&gt;17.80%&lt;/b&gt;
              &lt;/td&gt;
              
              &lt;td&gt;
                5.44%
              &lt;/td&gt;
              
              &lt;td&gt;
                &lt;b&gt;3.66%&lt;/b&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            
            &lt;tr&gt;
              &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
                Messages / Hour
              &lt;/th&gt; 
              
              &lt;td&gt;
                1926
              &lt;/td&gt;
              
              &lt;td&gt;
                &lt;b&gt;21685&lt;/b&gt;
              &lt;/td&gt;
              
              &lt;td&gt;
                5229
              &lt;/td&gt;
              
              &lt;td&gt;
                &lt;b&gt;23184&lt;/b&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            
            &lt;tr&gt;
              &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
                % Battery / Message &lt;a href=&quot;#BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;*&lt;/a&gt;
              &lt;/th&gt;
              
              &lt;td&gt;
                0.00975
              &lt;/td&gt;
              
              &lt;td&gt;
                &lt;b&gt;0.00082&lt;/b&gt;
              &lt;/td&gt;
              
              &lt;td&gt;
                0.00104
              &lt;/td&gt;
              
              &lt;td&gt;
                &lt;b&gt;0.00016&lt;br /&gt; &lt;/b&gt;
              &lt;/td&gt;
            &lt;/tr&gt; 
            
            &lt;p style=&quot;margin-top:1.5em;&quot;&gt;
              And here&amp;#8217;s, yes you guessed it, yet more graphs:
            &lt;/p&gt;
            
            &lt;h4 style=&quot;text-align: center;&quot;&gt;
              &lt;b&gt;3G &amp;#8211; Send 1024 x 1 byte messages – Total mW&lt;/b&gt;
            &lt;/h4&gt;
            
            &lt;div id=&quot;noCellBorder&quot;&gt;
              &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
                &lt;tr&gt;
                  &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
                    mW
                  &lt;/td&gt;
                  
                  &lt;td&gt;
                    &lt;div id=&quot;_3G_S&quot; style=&quot;width:550px;height:300px;&quot;&gt;
                    &lt;/div&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td&gt;
                  &lt;/td&gt;
                  
                  &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
                    1 second period
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/table&gt;
            &lt;/div&gt;
            
            &lt;h4 style=&quot;text-align: center;&quot;&gt;
              &lt;b&gt;Wifi &amp;#8211; Send 1024 x 1 byte messages – Total mW&lt;/b&gt;
            &lt;/h4&gt;
            
            &lt;div id=&quot;noCellBorder&quot;&gt;
              &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
                &lt;tr&gt;
                  &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
                    mW
                  &lt;/td&gt;
                  
                  &lt;td&gt;
                    &lt;div id=&quot;_W_S&quot; style=&quot;width:550px;height:300px;&quot;&gt;
                    &lt;/div&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td&gt;
                  &lt;/td&gt;
                  
                  &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
                    1 second period
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/table&gt;
            &lt;/div&gt;
            
            &lt;p&gt;
              And again, MQTT wins. It uses significantly less power (see % Battery / Message) and is a lot quicker. I don&amp;#8217;t think there&amp;#8217;s anything else I need to say about this one.
            &lt;/p&gt;
            
            &lt;div class=&quot;linebreak&quot;&gt;
            &lt;/div&gt;
            
            &lt;h1&gt;
              &lt;a name=&quot;conclusions&quot;&gt;&lt;/a&gt;Conclusions
            &lt;/h1&gt;
            
            &lt;div class=&quot;linebreak&quot;&gt;
            &lt;/div&gt;
            
            &lt;p&gt;
              Well, I have to admit I&amp;#8217;m somewhat relieved. I&amp;#8217;ve been using MQTT on mobile for a while now and I&amp;#8217;ve been confident that the power consumption was lower than that of HTTPS, but it&amp;#8217;s good to see that the figures support that. I&amp;#8217;m definitely an MQTT fan, but I&amp;#8217;ve been keen to make this testing fair and unbiased and I would&amp;#8217;ve reported the results whichever came out on top (although I know a few people who would be none too happy about that). So definitely relieved :)
            &lt;/p&gt;
            
            &lt;p&gt;
              As this testing has shown, MQTT uses less power to maintain an open connection, to receive messages and to send them. It also does these last two more quickly and reliably. The only place where it loses out is in establishing the initial connection (with cleanstart=true) and that&amp;#8217;s mitigated after ~5 &amp;frac12; minutes of being connected.
            &lt;/p&gt;
            
            &lt;p&gt;
              There&amp;#8217;s a number of other benefits of MQTT over HTTPS as well, which I&amp;#8217;ve not really included in this testing, which include:
            &lt;/p&gt;
            
            &lt;ul&gt;
              &lt;li&gt;
                Assured delivery
              &lt;/li&gt;
              &lt;li&gt;
                Retained messages
              &lt;/li&gt;
              &lt;li&gt;
                Last will &amp;amp; testament
              &lt;/li&gt;
              &lt;li&gt;
                Multiple subscriptions &amp;#8216;multiplexed&amp;#8217; over one connection
              &lt;/li&gt;
            &lt;/ul&gt;
            
            &lt;p&gt;
              These could theoretically be built into a HTTPS approach, but they&amp;#8217;re not there by default.
            &lt;/p&gt;
            
            &lt;p&gt;
              So I think it&amp;#8217;s definitely fair to say that MQTT wins overall and is my technology of choice for providing true push capabilities on Android.
            &lt;/p&gt;
            
            &lt;h2&gt;
              What next?
            &lt;/h2&gt;
            
            &lt;p&gt;
              I&amp;#8217;ve addressed a few of the additional use cases I identified in my &lt;a href=&quot;http://stephendnicholas.com/archives/219&quot; target=&quot;_blank&quot;&gt;last bout of MQTT power profiling&lt;/a&gt;, but there&amp;#8217;s still a couple of things I&amp;#8217;d like to look in to:
            &lt;/p&gt;
            
            &lt;ul&gt;
              &lt;li&gt;
                Testing the effect of message size on sending &amp;amp; receiving.
              &lt;/li&gt;
              &lt;li&gt;
                Testing power usage when running on fragile networks that keep dropping &amp;amp; being re-established.
              &lt;/li&gt;
              &lt;li&gt;
                Performing some longer term live field testing.
              &lt;/li&gt;
            &lt;/ul&gt;
            
            &lt;div class=&quot;linebreak&quot;&gt;
            &lt;/div&gt;
            
            &lt;p&gt;
              So, congratulations on reading this far. That&amp;#8217;s a bit of an epic post, my longest to date, but again hopefully it was interesting and informative. And I welcome any comments.
            &lt;/p&gt;
            
            &lt;link href=&quot;/blog_misc/jquery/jquery-ui-1.8.14.custom.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
            
            &lt;br /&gt;

 [1]: http://stephendnicholas.com/wp-content/uploads/2012/05/longpolling.png
 [2]: http://stephendnicholas.com/archives/1131
 [3]: http://ziyang.eecs.umich.edu/projects/powertutor/index.htm;
 [4]: http://ziyang.eecs.umich.edu/projects/powertutor/camera-ready.pdf
&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;
</summary>
      <id>https://stephendnicholas.com/archives/1217</id>
      <updated>2012-05-31T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>The Cost of Kindness</title>
      <link href="https://stephendnicholas.com/the-cost-of-kindness" />
      <summary type="html">&lt;p&gt;I like to think of myself as a pretty generous person, but when it comes to beggars I’m ashamed to say I’m not. If someone asks me for money on the street I’ll probably simply ignore them or mumble something about not having any change, walking past, eyes down, not acknowledging. And looking around, I don’t think I’m the only one.&lt;/p&gt;

&lt;p&gt;It’s hard to express my exact reasons for doing so. I think it’s a general mish-mash ranging from &lt;em&gt;‘It’s my money’&lt;/em&gt;, through &lt;em&gt;‘It’s a scam, they actually have loads of money’&lt;/em&gt; to &lt;em&gt;‘They’ll probably just spend it on drugs’&lt;/em&gt; and &lt;em&gt;‘You look scary, I don’t want to interact with you’&lt;/em&gt;. It’s not something I’m proud of and it’s not something I like, but it is my natural response. Or at least it used to be.&lt;/p&gt;

&lt;p&gt;It actually all started about a year ago, when I saw a TV interview with someone begging on the street and I remember them saying that they’d rather be acknowledged, than simply ignored; even if the person didn’t give any money. And so that’s what I started to do. Whenever someone asked me for money, I’d respond simply saying &lt;em&gt;‘No, sorry’&lt;/em&gt;. Nothing about not having any change or any other kind of half-hearted excuse / bold-faced lie.&lt;/p&gt;

&lt;p&gt;I decided that this approach was better (at least I was being forthright about my cheapness), but I got to thinking the other day: What would it actually cost me to say yes? To actually give some money every time someone asked me. And so that’s what I decided to do.&lt;/p&gt;

&lt;p&gt;The basic plan was that for one month, every time someone asked me for some money I’d give them £1 and keep a tally of how much it actually cost me. However, to make sure I did things right and didn’t try to weasel out, I decided to come up with a list of rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every time I walked by someone and they asked me for some money, I would give them £1.&lt;/li&gt;
  &lt;li&gt;Regardless of when I last gave them some money.&lt;/li&gt;
  &lt;li&gt;I had to be just as active as usual. I couldn’t just sit at home and avoid the issue.&lt;/li&gt;
  &lt;li&gt;I was not going to give any money to chuggers (Charity Muggers), as I personally don’t agree with what they do. I also wasn’t going to sign up to any regular donation schemes.&lt;/li&gt;
  &lt;li&gt;Anyone who knew what I was doing, or appeared to have figured it out, and was trying to game the system, would get nothing.&lt;/li&gt;
  &lt;li&gt;My decision was final (within the spirit of the exercise).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can probably guess from that, I was expecting this to be a fairly arduous and expensive enterprise; but hopefully somewhat interesting and illuminating.&lt;/p&gt;

&lt;p&gt;So on the first day of April I went to the bank, got out an initial £50 in coins and then the great experiment began…&lt;/p&gt;

&lt;h3 id=&quot;the-results&quot;&gt;The Results&lt;/h3&gt;

&lt;p&gt;Well, it’s actually been 48 days (which should give you some idea of just how &lt;em&gt;terribly&lt;/em&gt; costly this has been), I’ve stuck to all the rules outlined above and so far it’s cost me an enormous… £17.&lt;/p&gt;

&lt;p&gt;Which breaks down into:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;£3 for a big issue.&lt;/li&gt;
  &lt;li&gt;£2 for some local kids, raising money for their school, to wash my car.&lt;/li&gt;
  &lt;li&gt;£12 to people begging on the street.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seriously, that’s it. I’m honestly amazed. &lt;/p&gt;

&lt;p&gt;Now, I’m not going to claim this will be the case for everyone. It obviously makes a huge difference where you live, how you commute, how often you go out, etc, etc, but the purpose of this experiment was to see how much it would cost &lt;strong&gt;me&lt;/strong&gt; and so far it’s turned out to be sweet FA.&lt;/p&gt;

&lt;p&gt;I mean, I don’t want to harp on about this, but I really am astounded. I’ve been out &amp;amp; about, I’ve been in the local towns &amp;amp; cities during the day, at evenings &amp;amp; weekends, I’ve been up to London a few times and all it’s cost me is £17?! I really expected it to be a lot more.&lt;/p&gt;

&lt;p&gt;Putting the financial part to one side, I’m sure you won’t be surprised to hear that I also feel I need to share how this has made me feel; to chronicle my thoughts and emotions throughout this titanic endeavour:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do I feel good about it?&lt;/em&gt; Yeah, it’s kind of cool. I think I’m going to keep it up.&lt;/p&gt;
</summary>
      <id>https://stephendnicholas.com/the-cost-of-kindness</id>
      <updated>2012-05-17T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Android: Removing the green onclick border</title>
      <link href="https://stephendnicholas.com/android-removing-the-green-onclick-border" />
      <summary type="html">&lt;p&gt;For a while now, I’ve been finding the green highlight / box that the Android &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;WebView&lt;/code&gt;&lt;/a&gt; displays when you click something particularly annoying.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/annoying_green_highlight_thumb.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I understand why it’s there and UI feedback is definitely an important part of mobile design, but a lot of the time I like to take care of that myself and I find the green boxes can really spoil the user experience. Particularly when using buttons &amp;amp; form elements and anything involving Canvas.&lt;/p&gt;

&lt;p&gt;It’s been a mild thorn in my side for a while, but today I finally decided to look into it and it turns out the solution is remarkably simple. &lt;/p&gt;

&lt;p&gt;First of all, all credit goes to &lt;a href=&quot;http://stackoverflow.com/questions/2728566/android-browser-green-border-on-click&quot; target=&quot;_blank&quot;&gt;Stack Overflow&lt;/a&gt;. I’m not trying to steal credit, please &lt;a href=&quot;http://stackoverflow.com/questions/2728566/android-browser-green-border-on-click&quot; target=&quot;_blank&quot;&gt;go there&lt;/a&gt; and vote the solution up (I already have); but did it take some Google-Fu to find it and so I’m hoping by posting it here I might make it easier to find.&lt;/p&gt;

&lt;p&gt;Anyway, onto the solution, which is just to add the following to your pages stylesheet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example, so that:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;font-size:4em;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Annoying!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Becomes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;font-size:4em;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Annoying!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fantastically simple. And that stops the green boxes dead.&lt;/p&gt;

&lt;p&gt;It does seem to be on a page-by-page / per stylesheet basis though and also it is all or nothing (you can’t override the selection colour by changing the rgba, you can only seem to disable it as above), but that’s all I want, so I’m happy :)&lt;/p&gt;
</summary>
      <id>https://stephendnicholas.com/android-removing-the-green-onclick-border</id>
      <updated>2012-05-17T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>A simple SSL enabled Comet style Pub/Sub server with Node.js</title>
      <link href="https://stephendnicholas.com/a-simple-ssl-enabled-comet-server-in-node" />
      <summary type="html">&lt;p&gt;I’ve been meaning to have a play with Node.js for a while, but up until now I haven’t had a good reason. Running through a ‘Hello World’ example is all well and good, but I’m the kind of person who actually needs to do something when learning a new technology; otherwise I’ll just pick it up for an afternoon and then put it down and forget about it. &lt;/p&gt;

&lt;p&gt;So I decided to try writing a simple SSL enabled Comet style pub/sub server (for reasons that may become apparent in future posts) and it turned out to be really easy; taking just over 100 lines of code (including comments and liberal spacing).&lt;/p&gt;

&lt;p&gt;The complete code’s at the bottom of this post, so if that’s what your after, feel free to skip ahead.&lt;/p&gt;

&lt;p&gt;Otherwise, I’m just going to quickly run through some of the steps it took me to get there:&lt;/p&gt;

&lt;h3 id=&quot;learning-the-basics-of-nodejs&quot;&gt;1. Learning the basics of Node.js&lt;/h3&gt;

&lt;p&gt;For this I turned to the &lt;a href=&quot;http://www.nodebeginner.org/&quot; target=&quot;_blank&quot;&gt;The Node Beginner Book&lt;/a&gt;, which I’d really recommend. It’s a nice advanced introduction for developers familiar with at least one object-orientated programming language and completely new to Node.js. It skips over the simple stuff, like data types and basic programming flows, and takes you through developing ‘&lt;em&gt;a complete web application which allows the users of this application to view web pages and upload files&lt;/em&gt;’; introducing a lot of the important Node.js concepts along the way.&lt;/p&gt;

&lt;h3 id=&quot;figuring-out-how-to-implement-ssl-with-nodejs&quot;&gt;2. Figuring out how to implement SSL with Node.js&lt;/h3&gt;

&lt;p&gt;With a basic understanding of Node.js under my belt, I then decided to approach what I thought would be the most tricky part: adding SSL to the server. I’ve had issues with this before in different languages and so was expecting some pain; however it was pretty simple.&lt;/p&gt;

&lt;p&gt;Here’s an quick example of how to create a SSL enabled ‘hello world’ server, taken from the &lt;a href=&quot;http://nodejs.org/docs/v0.3.7/api/https.html&quot; target=&quot;_blank&quot;&gt;Node.js documentation for https&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Include the https &amp;amp; file system modules  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Create the server options object, specifying the SSL key &amp;amp; cert  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;privatekey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;certificate.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Create the HTTPS enabled server - listening on port 8000  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello world\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turned out the most tricky part was generating the certificates and this was still pretty easy. All I needed to do was install &lt;a href=&quot;http://www.openssl.org/&quot; target=&quot;_blank&quot;&gt;openssl&lt;/a&gt; and then issue the following command line commands:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;openssl genrsa -out privatekey.pem 1024&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;openssl req -new -key privatekey.pem -out certrequest.csr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One slight gotcha was that, as a Windows user, the second command (openssl req…) kept failing for me with the error message: &lt;b&gt;“Unable to load config info from /usr/local/ssl/openssl.cnf”&lt;/b&gt;. A &lt;a href=&quot;http://irwinj.blogspot.com/2008/11/unable-to-load-config-info-from.html&quot; target=&quot;_blank&quot;&gt;quick tip&lt;/a&gt; pointed out that all you need to do to solve this is specify the config path yourself, by using -config. E.g.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;openssl req -new -key privatekey.pem -out certrequest.csr -config C:\OpenSSL-Win64\bin\openssl.cfg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;figuring-out-how-to-do-comet-with-nodejs&quot;&gt;3. Figuring out how to do Comet with Node.js&lt;/h3&gt;

&lt;p&gt;Again it turns out this is really simple. Simple (at least for the moment) seems to be a word I’m associating a lot with Node.js. To implement a long polling Comet approach, the two key elements appear to be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set it so that the incoming connection doesn’t expire - by calling &lt;code&gt;req.connection.setTimeout(0);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Store the response objects for the incoming connections somewhere and then use them to send the data later on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a relatively simple example (based on one I found &lt;a href=&quot;http://zenmachine.wordpress.com/2010/01/31/node-js-and-comet/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;) that causes each request to ‘/comet’ to wait up to 5 seconds before it gets a reply:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Array of responses awaiting replies  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitingResponses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Function that will send a message to each waiting response  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendToWaitingResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//If there are some waiting responses  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitingResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//For each one - respond with &amp;#39;Hello World - &amp;lt;current timestamp&amp;gt;&amp;#39;  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitingResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitingResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World - &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    
  &lt;span class=&quot;c1&quot;&gt;//Schedule this method to be called again in 5 seconds &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendToWaitingResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    
&lt;span class=&quot;c1&quot;&gt;//Schedule the first call of sendToWatitingResponses() for 5 seconds from now &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendToWaitingResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    
&lt;span class=&quot;c1&quot;&gt;//Start the server - listening on port 8000 &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  
  &lt;span class=&quot;c1&quot;&gt;//Only handle requests to /comet &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/comet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;//Set it so the connection doesn&amp;#39;t time out &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    
    &lt;span class=&quot;c1&quot;&gt;//Add the response object to the array of waiting responses &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//To be replied to at some point by the sendToWaitingResponses() method &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;waitingResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I’ve used a repeating method (called every 5 seconds using &lt;code&gt;setTimeout(...)&lt;/code&gt;) to trigger sending the data; however in a real implementation this would be triggered by some kind of event (e.g. a publish being received).&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;4. Putting it all together&lt;/h3&gt;

&lt;p&gt;The final step was pulling all this together to create my pub/sub server; allowing applications to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subscribe&lt;/strong&gt; - by sending a GET request to &lt;code&gt;&#39;/s?t=&amp;lt;topic&amp;gt;&#39;&lt;/code&gt;. The connection will then remain open until a publish for that topic comes in, at which point the message is sent and the connection closed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publish&lt;/strong&gt; - by sending a POST request to &lt;code&gt;&#39;/p?t=&amp;lt;topic&amp;gt;&#39;&lt;/code&gt; with the content of the message as the body of the post, encoded in utf-8.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the full code, including copious comments, so hopefully you can understand what I’ve done:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Really undefined  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Setup server options with SSL key &amp;amp; cert  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;privatekey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;certificate.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Multidimensional array of  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//[topic][subscription response objects waiting for data]  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//I.e. each topic has an array of response objects waiting for the next publish  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Create the server - listenting on port 8000  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Incoming request for:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//Parse out the pathname  &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//Parse out the topic query parameter  &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//Note: true tells parse(...) to parse the query string for us too (neat)  &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//If subscribe request  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/s&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 

    &lt;span class=&quot;c1&quot;&gt;//If topic not specified - then error  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; Error: Topic (t=...) not specified.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; Topic:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//Set timeout to 0 - so the request doesn&amp;#39;t timeout - making it comet-y  &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//Initialise the topic specific subscription array if it doesn&amp;#39;t already exist  &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//Add the response object to array of &amp;#39;subscriptions&amp;#39; to be served for that topic  &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;c1&quot;&gt;//Else if publish request  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//If topic not specified - then error  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; Error: Topic (t=...) not specified.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; Topic:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//Parse in all the post data - the published &amp;#39;message&amp;#39;  &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//Each chunk of post data is simply appended to the var postData  &lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postDataChunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nx&quot;&gt;postData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postDataChunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//Once we&amp;#39;ve got all the post data  &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; All post data received. Post data:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//For each subscription FOR THIS TOPIC - send them the post data and close with 200 response  &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
            &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
            &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
            &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
          
          &lt;span class=&quot;c1&quot;&gt;//Clear all &amp;#39;subscriptions&amp;#39; for the topic &lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//Send response to the publish request &lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;//Else not supported path &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; Not Found&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Finished request.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, this is my first piece of Node programming, so please be gentle; however I don’t think I’ve done anything too stupid. First of all, it works and does what I want. Secondly, I think it should be relatively scalable (though I’ve not tested this). And thirdly, due to the single threaded nature of Node.js (Yay!) there &lt;i&gt;shouldn’t&lt;/i&gt; be any real concurrency issues.&lt;/p&gt;

&lt;p&gt;The one thing I am missing, is some kind of logic to purge dead connections, but I guess you can’t have everything :)&lt;/p&gt;
</summary>
      <id>https://stephendnicholas.com/a-simple-ssl-enabled-comet-server-in-node</id>
      <updated>2012-04-30T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Android: Attaching files from internal cache to Gmail</title>
      <link href="https://stephendnicholas.com/android-attaching-files-from-internal-cache-to-gmail" />
      <summary type="html">&lt;p&gt;&lt;em&gt;Note: the method described in the post works well for Gmail, but apparently has some issues with other ACTION_SEND handlers (e.g. the MMS composer). A workaround is described in the comments.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve just spent the day modifying one of my Android applications so that it no longer requires the use of the SD card; making it use the internal cache for what little storage is required. Everything went pretty smoothly, until I got to a part of the app that tries to share some data by sending an email with an attachment via Gmail (using an &lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html#ACTION_SEND&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ACTION_SEND&lt;/code&gt;&lt;/a&gt; intent). Then things started behaving very oddly.&lt;/p&gt;

&lt;p&gt;What I saw was that the Compose activity would launch correctly and my file would be shown as attached (as an example, I’ve attached a text file called Test.txt here); however when I sent the message, the attachment was not on the received email:&lt;/p&gt;

&lt;div class=&quot;inline_imgs&quot;&gt;
&lt;img src=&quot;/assets/img/gmail_attach_1.png&quot; style=&quot;width:45%&quot; /&gt;&lt;img src=&quot;/assets/img/gmail_attach_2.png&quot; style=&quot;width:45%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Or even shown in my Gmail sent folder.&lt;/p&gt;

&lt;p&gt;A quick browse through the log showed the reason:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;02-28 21:01:28.434: E/Gmail(19673): file:// attachment paths must point to file:///mnt/sdcard. Ignoring attachment file:///data/data/com.stephendnicholas.gmailattach/cache/Test.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, it looks like this is something Gmail has explicitly ruled out; though I’m not sure why. At this point I could easily get all moany and ranty, but today was a glass half full day and so it was time for a workaround.&lt;/p&gt;

&lt;p&gt;After a few false starts and a lot of searching, what I actually ended up doing was using a &lt;a href=&quot;http://developer.android.com/reference/android/content/ContentProvider.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ContentProvider&lt;/code&gt;&lt;/a&gt; to provide access to the file from my application’s internal cache; as apparently Gmail can happily resolve attachments this way.&lt;/p&gt;

&lt;p&gt;Unfortunately there wasn’t much example code to help me on my way, which is why I’ve decided to include a simple example here. There’s four main parts to this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;a href=&quot;http://developer.android.com/reference/android/content/ContentProvider.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ContentProvider&lt;/code&gt;&lt;/a&gt; that provides access to the files from the application’s internal cache. Complete code, with comments, is shown below:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stephendnicholas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gmailattach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.FileNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.content.ContentProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.content.ContentValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.content.UriMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.database.Cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.net.Uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.ParcelFileDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.util.Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CachedFileProvider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLASS_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;CachedFileProvider&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The authority is the symbolic name for the provider class&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTHORITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;com.stephendnicholas.gmailattach.provider&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// UriMatcher used to match against incoming requests&amp;lt;br /&amp;gt; private UriMatcher uriMatcher;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uriMatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UriMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UriMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NO_MATCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Add a URI to the matcher which will match against the form&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &amp;#39;content://com.stephendnicholas.gmailattach.provider/*&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and return 1 in the case that the incoming Uri matches this pattern&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uriMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addURI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTHORITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParcelFileDescriptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;openFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLASS_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; - openFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Called with uri: &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLastPathSegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Check incoming Uri against the matcher&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If it returns 1 - then it matches the Uri defined in onCreate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// The desired file name is specified by the last segment of the path&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// E.g. &amp;#39;content://com.stephendnicholas.gmailattach.provider/Test.txt&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Take this and build the path to the file&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCacheDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLastPathSegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Create &amp;amp; return a ParcelFileDescriptor pointing to the file&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Note: I don&amp;#39;t care what mode they ask for - they&amp;#39;re only getting&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// read only&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ParcelFileDescriptor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParcelFileDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ParcelFileDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MODE_READ_ONLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pfd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Otherwise unrecognised Uri&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unsupported uri: &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Unsupported uri: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// //////////////////////////////////////////////////////////////&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Not supported / used / required for this example&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// //////////////////////////////////////////////////////////////&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentvalues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentvalues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, all you really need to do is to overwrite the &lt;code&gt;openFile(...)&lt;/code&gt; method. Although you can also override the &lt;code&gt;query(...)&lt;/code&gt; method to provide more information to the application that calls you (it would make this example unnecessarily complicated, but I’m happy to provide code on request).&lt;/p&gt;

&lt;p&gt;To make this provider available to use, you need to add a line to your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; defining the class and the authority (symbolic name) used to reference it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;provider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CachedFileProvider&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:authorities=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.stephendnicholas.gmailattach.provider&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; this needs to go inside the &lt;code&gt;&amp;lt;application&amp;gt;...&amp;lt;/application&amp;gt;&lt;/code&gt; definition in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    The utility method that creates a file in the internal cache:
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCachedFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCacheDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cacheFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createNewFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    The utility method that creates the intent to send the content via Gmail (explicitly using Gmail, rather than using a chooser):
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSendEmailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_SEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//Explicitly only use Gmail to send&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.google.android.gm&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.google.android.gm.ComposeActivityGmail&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;plain/text&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//Add the recipients&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_SUBJECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_TEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//Add the attachment by specifying a reference to our custom ContentProvider&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//and the specific file of interest&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXTRA_STREAM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content://&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CachedFileProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTHORITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    The code that calls 2 &amp;amp; 3 to do something on a button press. Triggered in my dummy app by a button click:
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dostuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createCachedFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GmailAttacherActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This is a test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSendEmailIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GmailAttacherActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;YOUR_EMAIL_HERE&amp;gt;@&amp;lt;YOUR_DOMAIN&amp;gt;.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;See attached&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActivityNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GmailAttacherActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Gmail is not available on this device.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hopefully that’s all pretty straight forward, however feel free to ask any questions in the comments and I’ll help where I can.&lt;/p&gt;

&lt;p&gt;The full source is now available as a complete (albeit very simple) Android app on github: &lt;a href=&quot;https://github.com/stephendnicholas/Android-Apps/tree/master/Gmail%20Attacher&quot;&gt;Gmail Attacher&lt;/a&gt;.&lt;/p&gt;

</summary>
      <id>https://stephendnicholas.com/android-attaching-files-from-internal-cache-to-gmail</id>
      <updated>2012-02-28T00:00:00-07:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Reclaiming Windows Audio from Android Emulators &amp;#038; VMs</title>
      <link href="https://stephendnicholas.com/reclaiming-windows-audio-from-android-emulators" />
      <summary type="html">&lt;p&gt;Recently, every time I run the Android Emulator, I lose all sound output on my laptop (running Windows 7) and have to restart to get it back. It’s very annoying. Particularly as I like to have music when coding.&lt;/p&gt;

&lt;p&gt;I’ve been putting up with this for a while, assuming it was some complicated driver issue, but a chance Twitter encounter today led me to a colleague who’s been having the same kind of problem (although his was caused mainly by running Virtual Machines).&lt;/p&gt;

&lt;p&gt;He’d managed to figure out that it was just the Windows Audio service that was messed up and all you needed to do was to restart it to get sound back. Simple!&lt;/p&gt;

&lt;p&gt;He was even kind enough to share a simple bat script that would do it for me (Run as Administrator):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bat&quot; data-lang=&quot;bat&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;off&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;ECHO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;ECHO&lt;/span&gt; Restarting Windows Audio  
&lt;span class=&quot;k&quot;&gt;ECHO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;  
net stop &lt;span class=&quot;s2&quot;&gt;&amp;quot;Windows Audio&amp;quot;&lt;/span&gt;;  
net start &lt;span class=&quot;s2&quot;&gt;&amp;quot;Windows Audio&amp;quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</summary>
      <id>https://stephendnicholas.com/reclaiming-windows-audio-from-android-emulators</id>
      <updated>2012-02-22T00:00:00-07:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Finding processes on (i.e. ps for) Windows</title>
      <link href="https://stephendnicholas.com/finding-processes-on-windows" />
      <summary type="html">&lt;p&gt;As part of creating some test infrastructure for a work project the other day, I was looking for a good way to find any existing / leftover processes, so I could ensure things were in a clean state at the start of each test run. On Linux this is pretty easy, using ps, but I couldn’t find a good way to do it on Windows.&lt;/p&gt;

&lt;p&gt;There’s the &lt;a href=&quot;http://technet.microsoft.com/en-us/library/bb491010.aspx&quot;&gt;tasklist&lt;/a&gt; command, which will output the following:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nl&quot;&gt;C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBM_ADMIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasklist&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Mem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=========================&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;========&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;================&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===========&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;============&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Idle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;              &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;                   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;                           &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;                   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;996&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;smss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exe&lt;/span&gt;                       &lt;span class=&quot;mi&quot;&gt;448&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;                   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;380&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And for most cases, that’s enough. But I was looking for a particular Java process and unfortunately I couldn’t tell which of the java.exe processes were the ones I was interested in and which were for something else – as tasklist doesn’t provide enough information (i.e. the launch parameters).&lt;/p&gt;

&lt;p&gt;After a fair bit of Googling (which I’m hoping to save someone), I came accross a pretty cool command line interface called WMIC (&lt;a href=&quot;http://technet.microsoft.com/en-us/library/bb742610.aspx&quot;&gt;Intro&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://quux.wiki.zoho.com/WMIC-Snippets.html&quot;&gt;Examples&lt;/a&gt;) that’s immensely powerful for gathering information from Windows-based systems (and is installed by default since Windows 2000).&lt;/p&gt;

&lt;p&gt;It seems to do a whole load of stuff, but I was particularly interested in the process side of things and found that I could simply do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nl&quot;&gt;C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBM_ADMIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WMIC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROCESS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Processid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Commandline&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Caption&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;CommandLine&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;ProcessId&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exe&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xmx128m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.\lib;.\liblib\GAIANDB.jar;.\liblib\db2jcutdown.jar;.\liblib\derbyclient.jar;.\liblib\derby.jar;.\liblib\derbynet.jar;.\liblib\derbytrimmed.jar;.\liblib\wpml-pfg.jar;.\liblib\siapi.jar;.\liblib\esapi.jar;.\liblib\wmqtt.jar;C:\APPS\wpml-1.2\lib\wpml.jar;C:\APPS\wpml-1.2\lib\JSON4J.jar;C:\APPS\wpml-1.2\lib\arenatk.jar;C:\APPS\wpml-1.2\lib\antlr-2.7.7.jar;.\liblib\db2jcc.jar;.\liblib\db2jcc_license_cu.jar;.\liblib\ojdbc14.jar;.;C:\PROGRA~1\IBM\SQLLIB\java\db2java.zip;C:\PROGRA~1\IBM\SQLLIB\java\db2jcc.jar;C:\PROGRA~1\IBM\SQLLIB\java\sqlj.zip;C:\PROGRA~1\IBM\SQLLIB\java\db2jcc_license_cu.jar;C:\PROGRA~1\IBM\SQLLIB\bin;C:\PROGRA~1\IBM\SQLLIB\java\common.jar&amp;quot;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ibm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gaiandb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GaianNode&lt;/span&gt; 	&lt;span class=&quot;mi&quot;&gt;7840&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, this spits out info for all running processes (I’ve &lt;strong&gt;greatly&lt;/strong&gt; trimmed down the result above), but I then found you can also pass in &lt;code&gt;WHERE&lt;/code&gt; commands to restrict things to exactly what you want. E.g.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nl&quot;&gt;C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBM_ADMIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WMIC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROCESS&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandLine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ibm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gaiandb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GaianNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processid&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ProcessId&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;7840&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which I could then easily parse to get the info I wanted.&lt;/p&gt;

&lt;p&gt;Note: In the above examples, I’ve restricted the fields that are returned. If you don’t restrict the GET, the full list of things that is returned is:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreationClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSCreationClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutablePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandleCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstallDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KernelModeTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaximumWorkingSetSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MinimumWorkingSetSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OSCreationClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OSName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OtherOperationCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OtherTransferCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageFaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageFileUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentProcessId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeakPageFileUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeakVirtualSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeakWorkingSetSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrivatePageCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuotaNonPagedPoolUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuotaPagedPoolUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuotaPeakNonPagedPoolUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuotaPeakPagedPoolUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadOperationCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadTransferCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TerminationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserModeTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VirtualSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowsVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkingSetSize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteOperationCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteTransferCount&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</summary>
      <id>https://stephendnicholas.com/finding-processes-on-windows</id>
      <updated>2011-12-10T00:00:00-07:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Power Profiling: MQTT on Android</title>
      <link href="https://stephendnicholas.com/archives/219" />
      <summary type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Recently I’ve been doing a lot with &lt;a href=&quot;http://mqtt.org/&quot;&gt;MQTT&lt;/a&gt; on Android, in particular because it’s such a good fit. Not only can it be used to provide immediate push notification capability, but it also provides low latency, guaranteed messaging over fragile networks and efficient distribution to one or many receivers. Even better, it does all this with small message sizes (minimising the amount of bytes flowing over the wire) and low power usage.&lt;/p&gt;

&lt;p&gt;The other great thing about MQTT is that there’s loads of information about it on the web. The specification is fully available, it’s &lt;a href=&quot;http://mqtt.org/2011/08/open-invitation-to-join-the-mqtt-standardization-discussion&quot;&gt;about to be an open standard&lt;/a&gt; and it’s also been fairly well adopted by the hobby &amp;amp; hacker crowd, so there’s loads of blogs and tutorials all about it.&lt;/p&gt;

&lt;p&gt;One thing I have noticed though, is that, while most people who’ve used MQTT know that it uses extremely low amounts of power on mobile devices, I couldn’t find any definitive power figures. It’s mostly just anecdotal evidence, and so I thought I’d try collecting some. This post details what I did &amp;amp; the results I found.&lt;/p&gt;

&lt;h3 id=&quot;what-was-i-testing&quot;&gt;What was I testing?&lt;/h3&gt;

&lt;p&gt;Basically it’s a very simple application that calls a custom Android wrapper around a standard Java MQTT client offered by IBM (the one that currently ships with WebSphere MQ Telemetry, for those in the know). All the MQTT work is done in it’s own thread and messages flow in and out between this and the test application through &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handlers&lt;/code&gt;&lt;/a&gt;. It’s not really worthy of a screenshot, but if you’re really keen, you can find one &lt;a href=&quot;http://stephendnicholas.com/wp-content/uploads/2011/10/mpp-test-app.png&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The custom wrapper is one that I’ve created for some things I’ve been doing at work, so unfortunately I’m not able to post the code (right now); but if you imagine a couple of &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handlers&lt;/code&gt;&lt;/a&gt; for getting messages in and out, an &lt;a href=&quot;http://developer.android.com/reference/android/app/AlarmManager.html&quot;&gt;&lt;code&gt;Alarm Manager&lt;/code&gt;&lt;/a&gt; for sending Keep-Alives and some special error handling, you wouldn’t be far wrong.&lt;/p&gt;

&lt;h3 id=&quot;how-did-i-test-it&quot;&gt;How did I test it?&lt;/h3&gt;

&lt;p&gt;I’ve written up a separate &lt;a href=&quot;http://stephendnicholas.com/archives/202&quot; title=&quot;Android Power Profiling&quot;&gt;post here&lt;/a&gt; on the generic approach I used to capture and process the power usage data. In terms of specifics for this testing, I used the Android application described above along with a simple desktop application that was used to send data to / receive data from the Android application. The tests were kicked off manually by myself, either by clicking a button in the Android app or by starting a process in the desktop application, but the timing of events was captured automatically – which allowed me to normalise for any delays from me starting things off.&lt;/p&gt;

&lt;h3 id=&quot;caveats--specifics&quot;&gt;Caveats / Specifics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The power profiling was performed on my HTC Desire, running Android 2.2 – Build 2.33.161.2 CL284385.&lt;/li&gt;
  &lt;li&gt;Throughout this article I refer to the power usage in terms of % Battery / Hour. This refers to the % of the fully charged capacity of my phone’s battery that is used per hour. My phone has a standard Li-Ion battery that is rated at: 1400mAh &amp;amp; 3.7V.&lt;/li&gt;
  &lt;li&gt;The tool I used to capture the power usage data (&lt;a href=&quot;http://ziyang.eecs.umich.edu/projects/powertutor/index.htm;&quot;&gt;PowerTutor&lt;/a&gt;) uses real data, combined with a power usage model for some aspects. This model has been tailored against the type of device I used for this testing and is reported to be accurate to within 0.8% on average, with a 2.5% margin of error. If you’re interested, you can find out more &lt;a href=&quot;http://ziyang.eecs.umich.edu/projects/powertutor/camera-ready.pdf&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;I’ve tried my best to produce correct, consistent and usable results; however I am human and so there’s a chance I have made mistakes somewhere. As such, these figures shouldn’t be treated as Gospel, but I would expect them to be representative of what you could expect to see.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;keep-alive&quot;&gt;Keep Alive&lt;/h2&gt;

&lt;p&gt;The first thing I tested was how much power does it take to simply maintain an open MQTT connection, with no messages flowing over the wire. To do this, the MQTT client needs to send a keep-alive message every so often to maintain the connection channel and also to let the server know it’s still connected. I tried a number of different keep-alive intervals and the results are summarised in the table below:&lt;/p&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th colspan=&quot;2&quot; style=&quot;background-color:#E6E6FA;&quot;&gt;
      % Battery / Hour
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th style=&quot;width:7em;background-color:#E6E6FA;&quot;&gt;
      Keep Alive&lt;br /&gt;(Seconds)
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#F8E7B2;&quot;&gt;
      3G
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#F8E7B2;&quot;&gt;
      Wifi
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      60
    &lt;/td&gt;
    
    &lt;td&gt;
      0.77641278
    &lt;/td&gt;
    
    &lt;td&gt;
      0.0119021
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      120
    &lt;/td&gt;
    
    &lt;td&gt;
      0.38884457
    &lt;/td&gt;
    
    &lt;td&gt;
      0.0062861
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      240
    &lt;/td&gt;
    
    &lt;td&gt;
      0.15568461
    &lt;/td&gt;
    
    &lt;td&gt;
      0.00283991
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      480
    &lt;/td&gt;
    
    &lt;td&gt;
      0.07792208
    &lt;/td&gt;
    
    &lt;td&gt;
      0.00134018
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt; &lt;br /&gt;
As you can see, the figures are fantastically low. 3G is probably of the most interest to people, and, even with a relatively short keep-alive interval of 60 seconds, it only costs ~0.8% of the phone’s battery per hour to maintain an open connection; with immediate push notification capability (one of the big selling points of MQTT on Android). And it’s an inverse relationship after that – with a doubling of the keep-alive interval, halving the battery usage.&lt;/p&gt;

&lt;p&gt;Personally, I tend to go for a keep-alive interval of 240 seconds; which provides timely detection of the disconnection of the client/server balanced against suitably low power usage (~0.16% per hour on 3G).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a brief aside:&lt;/em&gt; It was suggested to me that some mobile providers will purge a 3G TCP/IP connection if there’s no activity on it for over 10 minutes, however I did try a keep-alive interval of 960 seconds (16 minutes) and everything seemed to behave correctly. Though I guess this could be provider specific (I’m with Vodafone).&lt;/p&gt;

&lt;h2 id=&quot;sending&quot;&gt;Sending&lt;/h2&gt;

&lt;p&gt;The next thing I looked at was sending messages from the phone. I found it somewhat difficult to get sensible &amp;amp; consistent figures for sending a single message and so I decided to scale up to sending 1024 messages, of 1 byte a piece, as quickly as possible. This also helped to emphasise the difference between the different Qualities of Service (QoS – assured delivery level). The results are shown in the graphs below:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
  &lt;i&gt;Note: You can click &amp;amp; drag on an area of the graph to zoom to it. Single click anywhere to zoom back out.&lt;/i&gt;
&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; Send 1024 x 1 byte messages &amp;#8211; Total mW&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_Send&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; Send 1024 x 1 byte messages &amp;#8211; Total mW&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_Send&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the QoS 0 messages complete the fastest, followed by the QoS 1 and then the QoS 2. This is because the higher the Quality of Service, the more reliable the message delivery, and this has an associated overhead and delay; as it requires additional messages to flow between the client and server to confirm delivery.&lt;/p&gt;

&lt;p&gt;Unfortunately this makes it kind of hard to compare the different levels for battery usage, as QoS 0 uses more power per second (most of this is made up of CPU usage), but for a short amount of time, whereas QoS 1 &amp;amp; QoS 2 use much less power per second, but each for much longer. However, if we use a certain amount of poetic licence, we can extrapolate from the data to say how much battery would it cost to send continuously at each level for an hour, how many message would be sent in this time and from that get the comparative battery cost per message&lt;a href=&quot;#BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;*&lt;/a&gt;, which I’ve outlined in the tables below:&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G&lt;/b&gt;
&lt;/h4&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;width:7em;background-color:#E6E6FA;&quot;&gt;
      QoS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      Messages / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Message &lt;a href=&quot;#BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;*&lt;/a&gt;
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 0
    &lt;/td&gt;
    
    &lt;td&gt;
      15.12
    &lt;/td&gt;
    
    &lt;td&gt;
      614400
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000025
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 1
    &lt;/td&gt;
    
    &lt;td&gt;
      16.87
    &lt;/td&gt;
    
    &lt;td&gt;
      23938
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000705
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 2
    &lt;/td&gt;
    
    &lt;td&gt;
      17.66
    &lt;/td&gt;
    
    &lt;td&gt;
      15489
    &lt;/td&gt;
    
    &lt;td&gt;
      0.001140
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi&lt;/b&gt;
&lt;/h4&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;width:7em;background-color:#E6E6FA;&quot;&gt;
      QoS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      Messages / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Message &lt;a href=&quot;#BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;*&lt;/a&gt;
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 0
    &lt;/td&gt;
    
    &lt;td&gt;
      2.02
    &lt;/td&gt;
    
    &lt;td&gt;
      368640
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000005
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 1
    &lt;/td&gt;
    
    &lt;td&gt;
      0.93
    &lt;/td&gt;
    
    &lt;td&gt;
      26144
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000036
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 2
    &lt;/td&gt;
    
    &lt;td&gt;
      0.89
    &lt;/td&gt;
    
    &lt;td&gt;
      13704
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000065
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&quot;BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt; &lt;/a&gt;&lt;br /&gt;
* – This is a bit of a silly metric. Firstly, you wouldn’t tend to use MQTT like this, it’s more focused on providing an open channel for push notification and a more sporadic style of message sending &amp;amp; receiving. Secondly, there is a fixed cost in having the Wifi or 3G active and so the actual cost of just sending a single message would be higher. However these figures do serve to indicate the difference between the three qualities of service and hopefully give you an indication of the battery usage involved.&lt;/p&gt;

&lt;p&gt;If you’re interested in seeing how the power usage breaks down into the different categories (CPU &amp;amp; 3G/Wifi) you can &lt;a href=&quot;http://stephendnicholas.com/?p=219&amp;amp;page=2&quot;&gt;click here&lt;/a&gt; for some more pretty graphs.&lt;/p&gt;

&lt;h2 id=&quot;receiving&quot;&gt;Receiving&lt;/h2&gt;

&lt;p&gt;After sending, the next thing I looked at was receiving messages on the phone. To be consistent with the sending results, I sent 1024 messages, of 1 byte a piece, to the phone, as quickly as possible. The results are shown in the graphs below:&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; Receive 1024 x 1 byte messages &amp;#8211; Total mW&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_R&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; Receive 1024 x 1 byte messages &amp;#8211; Total mW&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_R&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Again we can see that the QoS 0 messages complete the fastest, followed by the QoS 1 and then QoS 2 (for the same reasons mentioned above). It takes slightly longer for all the messages to be received and so the power per second for each QoS is much more comparable, as the CPU load is spread out. However, to be consistent, I have extrapolated the data as before into the tables below.&lt;/p&gt;

&lt;p&gt;A couple of other things of notice are the two erroneous patterns in the QoS 2 flows. For 3G we see the message receiving stop for about 20 seconds before continuing, and for Wifi we briefly see a large spike in power usage about half way through. Unfortunately I don’t have anything to explain this, the connection doesn’t drop and there’s nothing immediately obvious. I’m going to repeat these tests when I get time and I expect this will turn out to be a one off anomaly, but for the moment I thought you might appreciate the experimental authenticity :)&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G&lt;/b&gt;
&lt;/h4&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;width:7em;background-color:#E6E6FA;&quot;&gt;
      QoS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      Messages / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Message &lt;a href=&quot;#BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;*&lt;/a&gt;
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 0
    &lt;/td&gt;
    
    &lt;td&gt;
      16.03
    &lt;/td&gt;
    
    &lt;td&gt;
      35446
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000452
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 1
    &lt;/td&gt;
    
    &lt;td&gt;
      17.48
    &lt;/td&gt;
    
    &lt;td&gt;
      27510
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000635
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 2
    &lt;/td&gt;
    
    &lt;td&gt;
      15.80
    &lt;/td&gt;
    
    &lt;td&gt;
      13552
    &lt;/td&gt;
    
    &lt;td&gt;
      0.001166
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi&lt;/b&gt;
&lt;/h4&gt;

&lt;table style=&quot;text-align:center;margin-left:auto;margin-right:auto;&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;width:7em;background-color:#E6E6FA;&quot;&gt;
      QoS
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      Messages / Hour
    &lt;/th&gt;
    
    &lt;th style=&quot;width:6em;background-color:#E6E6FA;&quot;&gt;
      % Battery / Message &lt;a href=&quot;#BatteryPerMessageDisclaimer&quot; style=&quot;background:none;&quot;&gt;*&lt;/a&gt;
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 0
    &lt;/td&gt;
    
    &lt;td&gt;
      0.59
    &lt;/td&gt;
    
    &lt;td&gt;
      64673
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000009
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 1
    &lt;/td&gt;
    
    &lt;td&gt;
      0.70
    &lt;/td&gt;
    
    &lt;td&gt;
      32914
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000021
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QoS 2
    &lt;/td&gt;
    
    &lt;td&gt;
      0.86
    &lt;/td&gt;
    
    &lt;td&gt;
      17226
    &lt;/td&gt;
    
    &lt;td&gt;
      0.000050
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p style=&quot;margin-top:1.5em&quot;&gt;
  Again, if you&amp;#8217;re interested in seeing how the power usage breaks down into the different categories (CPU &amp;amp; 3G/Wifi) you can find them by &lt;a href=&quot;http://stephendnicholas.com/?p=219&amp;amp;page=3&quot;&gt;clicking here&lt;/a&gt;.
&lt;/p&gt;

&lt;h2 id=&quot;connect--wait&quot;&gt;Connect &amp;amp; Wait&lt;/h2&gt;

&lt;p&gt;Finally, I thought I’d just briefly include a couple of graphs showing the general shape of creating a connection and leaving it running in the background (i.e. the initial connect and subsequent keep-alives, with a 60 seconds keep-alive interval):&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
  &lt;i&gt;Note: These are stacked graphs. CPU on top of 3G / Wifi.&lt;/i&gt;
&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; Connect &amp;amp; Wait&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_CW&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; Connect &amp;amp; Wait&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_CW&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;what-next&quot;&gt;What next?&lt;/h1&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;p&gt;This has been a relatively shallow foray into power profiling MQTT on Android and now I’ve done it I can think of a whole host of other things that I’m interested in doing. Things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testing the effect of message size on sending &amp;amp; receiving.&lt;/li&gt;
  &lt;li&gt;Testing power usage when running on fragile networks that keep dropping &amp;amp; being re-established.&lt;/li&gt;
  &lt;li&gt;Testing more realistic usage scenarios – e.g. messages flowing much more sparsely and/or at less predictable intervals.&lt;/li&gt;
  &lt;li&gt;Comparing MQTT with it’s possible alternatives, e.g. HTTP, C2DM, etc. Although it may be difficult to create a scenario where they all do the same thing so that they can be measured equally.&lt;/li&gt;
  &lt;li&gt;Open sourcing the code I’ve created – this is something I need to figure out with work, but, if possible, I’d love to get the code I used out there. Not only because I think people would find it really useful to have an Android MQTT component they could just drop into their projects, but also so that people could repeat the tests I’ve done here and try out new scenarios they’ve thought up themselves.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just need to find the time :)&lt;/p&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;p&gt;So, hopefully you found that interesting and maybe useful. If you have any comments, questions or suggestions, I’d be happy to hear them – but please do keep in mind the things I mentioned in the Caveats section above :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: the next two pages just contain some additional graphs of power usage broken down by category.&lt;/em&gt; &lt;/p&gt;

&lt;link href=&quot;/blog_misc/jquery/jquery-ui-1.8.14.custom.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;!--nextpage--&gt;

&lt;h1 id=&quot;sending-8211-additional-graphs&quot;&gt;Sending – Additional Graphs&lt;/h1&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
  &lt;i&gt;Note: These are stacked graphs. CPU on top of 3G / Wifi.&lt;/i&gt;
&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; QoS 0&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_S_0&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; QoS 1&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_S_1&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; QoS 2&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_S_2&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; QoS 0&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_S_0&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; QoS 1&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_S_1&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; QoS 2&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_S_2&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;link href=&quot;/blog_misc/jquery/jquery-ui-1.8.14.custom.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;!--nextpage--&gt;
&lt;p&gt;&amp;lt;/p&amp;gt; &lt;/p&gt;

&lt;h1 id=&quot;receiving-8211-additional-graphs&quot;&gt;Receiving – Additional Graphs&lt;/h1&gt;

&lt;div class=&quot;linebreak&quot;&gt;
&lt;/div&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
  &lt;i&gt;Note: These are stacked graphs. CPU on top of 3G / Wifi.&lt;/i&gt;
&lt;/p&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; QoS 0&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_R_0&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; QoS 1&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_R_1&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;3G &amp;#8211; QoS 2&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_3G_R_2&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; QoS 0&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_R_0&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; QoS 1&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_R_1&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h4 style=&quot;text-align: center;&quot;&gt;
  &lt;b&gt;Wifi &amp;#8211; QoS 2&lt;/b&gt;
&lt;/h4&gt;

&lt;div id=&quot;noCellBorder&quot;&gt;
  &lt;table style=&quot;padding:0.5em;padding-right:3em;&quot;&gt;
    &lt;tr&gt;
      &lt;td style=&quot;-webkit-transform: rotate(-90deg); font-weight:bold;&quot;&gt;
        mW
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;div id=&quot;_W_R_2&quot; style=&quot;width:550px;height:300px;&quot;&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td style=&quot;text-align:center; font-weight:bold;&quot;&gt;
        1 second period
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;link href=&quot;/blog_misc/jquery/jquery-ui-1.8.14.custom.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

</summary>
      <id>https://stephendnicholas.com/archives/219</id>
      <updated>2011-10-13T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>QuickeR: Using video QR codes to transfer data</title>
      <link href="https://stephendnicholas.com/quicker-video-qr-codes" />
      <summary type="html">&lt;p&gt;Recently I attended &lt;a href=&quot;http://overtheair.org/blog/&quot;&gt;Over the Air&lt;/a&gt;, which (to borrow from their website) is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a great vibe of bean bags, gadgets, knowledge sharing, hacking &amp;amp; lots of good geekery.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or, to be more specific:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a unique tech-agnostic event for and by the developer community, featuring technical workshops where attendees can roll up their sleeves and tinker with new platforms, operating systems, APIs &amp;amp; SDKs; and tutorial sessions that feature real business cases, new insights and a healthy dollop of inspiration. Attendees are invited to stay overnight so that they can work on ideas, apps and hacks on the fly – to be entered into the various hack-athon competition categories and demo’ed on the second day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And it was awesome! I met some really cool people, was fantastically well looked after, and this year it was held in &lt;a href=&quot;http://en.wikipedia.org/wiki/Bletchley_Park&quot;&gt;Bletchley Park&lt;/a&gt;; which is an amazing place and somewhere I’ve always wanted to visit.&lt;/p&gt;

&lt;p&gt;One of the more fun parts of the event was the traditional overnight hack; with people seeing what cool things they could cobble together (often involving some of the tech &amp;amp; APIs shown off at the event), which then got shown off the next day, with the best winning prizes.&lt;/p&gt;

&lt;p&gt;This is what I came up with:&lt;/p&gt;

&lt;h1 id=&quot;span-stylecolor59acffqspanuickespan-stylecolor59acffrspan&quot;&gt;&lt;span style=&quot;color:#59ACFF;&quot;&gt;Q&lt;/span&gt;uicke&lt;span style=&quot;color:#59ACFF;&quot;&gt;R&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;The basic idea was to transfer data between ‘devices’ using ‘video’ QR codes, i.e. by splitting the data over multiple QR codes, which are then presented one after another as a video. Another device can then capture this video, split it into the separate QR codes, process them and recombine their contents to reproduce the original data.&lt;/p&gt;

&lt;p&gt;So, as an example, I took the following four QR codes:&lt;/p&gt;

&lt;table id=&quot;qrtable&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;/assets/img/1.png&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;/assets/img/2.png&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;/assets/img/3.png&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;/assets/img/4.png&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;1This&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;code&gt;2is&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;code&gt;3a&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;code&gt;4test&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;And combined them into the following video (gif):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/fast.gif&quot; style=&quot;width:30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: the numbers are there to denote the order of the elements, as the video will repeat endlessly and we don’t know where it started.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I then created an Android app that could read the video and reconstitute the data:&lt;/p&gt;

&lt;div style=&quot;width:100%; text-align:center&quot;&gt;
  &lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RPM-oDcWcrk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Now, not to sound too full of myself, but I think is a pretty cool idea and it’s something that I don’t think I’ve seen anywhere before. &lt;/p&gt;

&lt;p&gt;The initial use case I came up with was for transferring data between mobile phones, particularly in situations when network connectivity wasn’t available or was unreliable (which was unfortunately the case at Over the Air). However it could work between any device that can display a video and any device that can capture that video and run a bit of software. So for example, you could communicate between a TV and a mobile phone – maybe to download a sample app while the advert is on?&lt;/p&gt;

&lt;p&gt;Also, theoretically, it has a moderately high transfer rate (for what it is):&lt;/p&gt;

&lt;p style=&quot;text-align:center;font-size:150%;&quot;&gt;
  15 FPS x ~2,953 bytes per frame = ~43 KB/s.
&lt;/p&gt;

&lt;p&gt;Comparable to a modem of old :)&lt;/p&gt;

&lt;p&gt;Now, the app as it is today is fairly cludgy, as you’d expect for something thrown together in the space of 5 hours, and so I’m not going to shove the code up here – yet. There’s a load of cool things I want to do first:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add video creation to the app – allowing you to select a file on the device for transfer.&lt;/li&gt;
  &lt;li&gt;Use smarter encoding schemes and maybe data compression.&lt;/li&gt;
  &lt;li&gt;Auto-stop &amp;amp; error checking – by adding information about how many frames should be in the data set.&lt;/li&gt;
  &lt;li&gt;Harden the code – it has a unfortunate tendency to fall over with out of memory errors at the moment :)&lt;/li&gt;
  &lt;li&gt;General UI improvements – creating one for a start.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Who knows, I may even release it as an app on the marketplace.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;*P.S. I did get some comments about the name. To be honest, I started with the Q &amp;amp; R and worked backwards from there; however I do argue that it’s quicker than scanning multiple QR codes separately and trying to put the stuff back together yourself.&lt;/p&gt;

</summary>
      <id>https://stephendnicholas.com/quicker-video-qr-codes</id>
      <updated>2011-10-03T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Android Power Profiling</title>
      <link href="https://stephendnicholas.com/android-power-profiling" />
      <summary type="html">&lt;p&gt;Recently I’ve been looking into power profiling some Android applications and I thought I’d write up a quick post about my approach and the tools I used.&lt;/p&gt;

&lt;h3 id=&quot;collecting-the-data-from-the-device&quot;&gt;Collecting the data from the device&lt;/h3&gt;

&lt;p&gt;To capture the power usage data from the Android device, I used a free app called &lt;a href=&quot;http://ziyang.eecs.umich.edu/projects/powertutor/index.html&quot;&gt;PowerTutor&lt;/a&gt;; which was created by the University of Michigan with support from Google.&lt;/p&gt;

&lt;p&gt;It’s a very simple app to use; basically you kick it off profiling and it records the power usage (mW) of each application running on the phone every second, categorised by: 3G, Audio, CPU, GPS, OLED and Wifi. When you’re done, you tell it to stop profiling and you can save the log file to the SD card. As summarised in the screenshots below:&lt;/p&gt;

&lt;div class=&quot;inline_imgs&quot;&gt;
&lt;img src=&quot;/assets/img/PowerTutor1.png&quot; style=&quot;width:25%&quot; /&gt;&lt;img src=&quot;/assets/img/PowerTutor2.png&quot; style=&quot;width:25%&quot; /&gt;&lt;img src=&quot;/assets/img/PowerTutor3.png&quot; style=&quot;width:25%&quot; /&gt;&lt;img src=&quot;/assets/img/PowerTutor4.png&quot; style=&quot;width:25%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;You can find the application on the Android marketplace and more information is available &lt;a href=&quot;http://ziyang.eecs.umich.edu/projects/powertutor/index.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you’ve captured the data, the next step is to get the log file off the device and (for those not familiar with the ADB command line) the simplest way is to plug your phone into a computer and then either mount it as a disk drive or use the ‘File Explorer’ view in an Android enabled Eclipse:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PT5.png&quot; style=&quot;width:75%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;parsing-the-data&quot;&gt;Parsing the data&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, the log file contains data on the power usage of each application running on the phone every second, categorised by: 3G, Audio, CPU, GPS, OLED and Wifi. &lt;/p&gt;

&lt;p&gt;However, it’s not in an immediately useful form and so I wrote a simple parser application which you can &lt;a href=&quot;/assets/files/PowerTutorParser.zip&quot;&gt;download from here&lt;/a&gt; (Zip containing runnable Jar, including source).&lt;/p&gt;

&lt;p&gt;This takes the data and spits it out into a CSV file, which looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PT6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which you can then use to make pretty graphs, such as these of MQTT power usage when sending 1024 messages at different qualities of service (QoS) over Wifi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PT8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’ll be doing a write up of my MQTT findings in a bit for those who are interested.&lt;/em&gt;&lt;/p&gt;

</summary>
      <id>https://stephendnicholas.com/android-power-profiling</id>
      <updated>2011-09-26T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>Eclipse quick line count</title>
      <link href="https://stephendnicholas.com/eclipse-quick-line-count" />
      <summary type="html">&lt;p&gt;Today I needed to find out how many lines of code were in one of my projects, so I loaded up Eclipse, loaded the project and then… was stumped. I couldn’t think what to do next. Surely, I thought, there must be a simple menu option for that, but no I couldn’t find anything and it appears that Eclipse doesn’t have this functionality built-in. Colour me boggled.&lt;/p&gt;

&lt;p&gt;Anyway, a quick search pointed me to a number of plug-ins I could install, but also to a really simple ‘hack’ (which I found  &lt;a href=&quot;http://www.binaryfrost.com/index.php?/archives/207-Easy-way-to-count-Lines-of-Code-in-Eclipse.html&quot;&gt;here&lt;/a&gt;). I thought it was so nice, I’d share it here in its entirety for everyone to see.&lt;/p&gt;

&lt;p&gt;The steps are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Eclipse search dialog. ‘Search -&amp;gt; File…’ from the main menu.&lt;/li&gt;
  &lt;li&gt;Set the ‘Containing text:’ to ‘\n’.&lt;/li&gt;
  &lt;li&gt;Check the ‘Regular expression’ checkbox.&lt;/li&gt;
  &lt;li&gt;Set the ‘File name patterns:’ to ‘*.java’.&lt;/li&gt;
  &lt;li&gt;Select a scope that is appropriate. The whole workspace, the current project or a working set.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img title=&quot;Eclipse search dialog&quot; src=&quot;/assets/img/search.png&quot; alt=&quot;Eclipse search dialog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then when you run the search, it will come back with a search result for every line of code in your application. You can see the total number of matches at the top, and it’s also broken down by class; exactly what I wanted. Here’s some example results from another project:&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;Eclipse search results&quot; src=&quot;/assets/img/search_results.png&quot; alt=&quot;Eclipse search results&quot; style=&quot;width:75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, there does appear to be one issue with this approach, as it can sometimes not count the final line in a class (if it doesn’t have a line break after it), but in my case that only left me about 30 lines out and that was good enough for me. Cool eh?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s a couple of other regexs that I found useful for reducing the above results to just lines of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//.*(\n{1})?&lt;/code&gt; – search for comment lines.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;^\s*\n&lt;/code&gt; – search for blank lines.&lt;/p&gt;

</summary>
      <id>https://stephendnicholas.com/eclipse-quick-line-count</id>
      <updated>2011-06-30T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
    <entry>
      <title>How to use the Android HandlerThread</title>
      <link href="https://stephendnicholas.com/android-handlerthread" />
      <summary type="html">&lt;p&gt;Today I’m going to talk about something I ran into recently that turned out to be very simple, despite initially seeming a little confusing, the Android &lt;a href=&quot;http://developer.android.com/reference/android/os/HandlerThread.html&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;So, first of all, why did I run into this? Well, basically I’ve been doing some work to improve the multi-threading of one of my applications, by splitting off some of the background work into a number of different threads; and to allow those threads to be easily interacted with, I wanted each of them to have their own &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now I’d read how to turn a thread into a &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; thread by calling &lt;code&gt;Looper.prepare()&lt;/code&gt;, setting up my &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; &amp;amp; then calling &lt;code&gt;Looper.loop()&lt;/code&gt;; however this left my thread unable to perform its own background activities and so I ended up creating sub-threads / runnables and things started getting rather messy.&lt;/p&gt;

&lt;p&gt;Assuming there must be a better way to do this, I eventually came across &lt;a href=&quot;http://developer.android.com/reference/android/os/HandlerThread.html&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt;, which is described in the Android documentation as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, in retrospect that actually seems quite clear- so I’m hoping that by writing this post, I’m not just exposing my stupidity- but initially I was a little unsure what it meant and how to use it.&lt;/p&gt;

&lt;p&gt;Anyway, long story short, after some searching and some experimentation, I came across the correct way to use it. Which is, unsurprisingly, very similar to how it’s described above:&lt;/p&gt;

&lt;p&gt;First of all you create and start a &lt;a href=&quot;http://developer.android.com/reference/android/os/HandlerThread.html&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt;, which creates a thread with a &lt;a href=&quot;http://developer.android.com/reference/android/os/Looper.html&quot;&gt;&lt;code&gt;Looper&lt;/code&gt;&lt;/a&gt;:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Create and start the handler thread &amp;amp; give it a custom name  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HandlerThread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MyHandlerThread&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You then get the &lt;a href=&quot;http://developer.android.com/reference/android/os/Looper.html&quot;&gt;&lt;code&gt;Looper&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;http://developer.android.com/reference/android/os/HandlerThread.html&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt; as follows:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Get the looper from the handlerThread  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the above method call can return null, in the unlikely event that the &lt;a href=&quot;http://developer.android.com/reference/android/os/HandlerThread.html&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt; not been started or if for any reason &lt;code&gt;isAlive()&lt;/code&gt; returns false. Practically I think this is unlikely to happen and I’m not sure if there’s anything sensible to do if it does, so I wouldn’t worry about it too much.&lt;/p&gt;

&lt;p&gt;You can then create your &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt;, passing in the &lt;a href=&quot;http://developer.android.com/reference/android/os/Looper.html&quot;&gt;&lt;code&gt;Looper&lt;/code&gt;&lt;/a&gt; for it to use  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Create a new handler- passing in the looper for it to use  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s all there is to it. You’ve now you got your own &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; running in it’s own thread. Simple, right?&lt;/p&gt;

&lt;p&gt;And finally, when your thread is finished, you can shut down the &lt;a href=&quot;http://developer.android.com/reference/android/os/HandlerThread.html&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt; as follows:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Shut down the HandlerThread  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just for completeness, below is an example of a complete class that extends thread and uses a &lt;a href=&quot;http://developer.android.com/reference/android/os/HandlerThread.html&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt; to create a &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; for inter-thread communication. As a side note, it also demonstrates the use of the &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.Callback.html&quot;&gt;&lt;code&gt;Handler.Callback&lt;/code&gt;&lt;/a&gt; interface to save you having to subclass &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; for performing your custom message handling.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stephendnicholas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Handler.Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.HandlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CUSTOM_MESSAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExampleThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;// Create and start the HandlerThread- it requires a custom name  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HandlerThread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MyHandlerThread&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Get the looper from the handlerThread  &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note: this may return null  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create a new handler- passing in the looper to use and this class as  &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the message handler  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// While this thread is running  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// TODO- custom thread logic&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Wait on mutex  &lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;c1&quot;&gt;// Don&amp;#39;t care  &lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Tell the handler thread to quit  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;// Set running to false  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Wake anyone waiting on mutex  &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notifyAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;CUSTOM_MESSAGE:&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;// TODO- custom logic  &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;// Return false- as we have not handled the message  &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Return true- as we have handled the message  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</summary>
      <id>https://stephendnicholas.com/android-handlerthread</id>
      <updated>2011-06-10T00:00:00-06:00</updated>
      <author>
        <name>Stephen Nicholas</name>
      </author>
    </entry>
  
</feed>
